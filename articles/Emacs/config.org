#+TITLE: Emacs Config
#+AUTHOR: Xt3

* Setting
** Default
- UI
  #+BEGIN_SRC emacs-lisp
;;; UI
;; bell
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

;; Visible
(blink-cursor-mode -1) ;; Turn off the blinking cursor
(column-number-mode t)
(setq indicate-empty-lines t)
(show-paren-mode t)
(global-visual-line-mode) ;; Line Wrapping
(diminish 'visual-line-mode)
(global-font-lock-mode t) ;; Syntax highlighting for all buffers
(setq show-trailing-whitespace nil)
(setq mouse-wheel-scroll-amount (quote (0.07)))
(global-hl-line-mode 1)

;; Buffer name
(setq uniquify-buffer-name-style 'forward)

;; Window 
(setq help-window-select t) ;; Help window opened -> get focus

;; GUI
(setq use-file-dialog nil)
(setq use-dialog-box nil)
  #+END_SRC
- Code System
  #+BEGIN_SRC emacs-lisp
;;; Code System
(setq locale-coding-system 'utf-8) 
(set-terminal-coding-system 'utf-8) 
(set-keyboard-coding-system 'utf-8) 
(set-selection-coding-system 'utf-8) 
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))  
  #+END_SRC
- Edit
  #+BEGIN_SRC emacs-lisp
;;; Edit

(setq-default indent-tabs-mode nil) ;; use space to indent by default
(setq-default tab-width 4) ;; tab width

(setq sentence-end-double-space nil) ;; Just one space is needed

(delete-selection-mode t) ;; delete the region when typing

;; Indent
(global-set-key (kbd "RET") 'newline-and-indent)
  #+END_SRC
- Misc
  #+begin_src emacs-lisp
;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Activate commonds
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Keep all backup and auto-save files in one directory
(setq delete-old-versions t)
(setq version-control t)
(setq vc-make-backup-files t)
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; Revert
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
  #+end_src
** Customize
- Custom file
  #+BEGIN_SRC emacs-lisp
;;; Load customize file
;; (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
;; (load custom-file)
  #+END_SRC
- Personal information
  #+BEGIN_SRC emacs-lisp
(setq user-full-name "Xt3"
      user-mail-address "???")  
  #+END_SRC
- Font
  #+begin_src emacs-lisp
(when (member "Hack" (font-family-list))
  (add-to-list 'initial-frame-alist '(font . "Hack-13"))
  (add-to-list 'default-frame-alist '(font . "Hack-13")))

;; Chinese Font
(when (and (member :macos *sys-is*)
           (member "PingFang SC" (font-family-list)))
  (dolist (charset '(kana han cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
                      charset
                      (font-spec :family "PingFang SC Regular"
                                 :size 11.8))))
  #+end_src
- Theme
  - [[https://github.com/n3mo/cyberpunk-theme.el][Cyberpunk]] 
    #+BEGIN_SRC emacs-lisp
(use-package cyberpunk-theme
  :config
  (progn
    (load-theme 'cyberpunk t)))
    #+end_src
- Modeline
  #+BEGIN_SRC emacs-lisp
;; Display Time : When displaying the time with display-time-mode
(setq display-time-default-load-average nil)
  #+END_SRC
- Chinese
  #+BEGIN_SRC emacs-lisp
;; 设置 sentence-end 可以识别中文标点
(setq sentence-end
      "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")  
  #+END_SRC

** Save & Session
#+BEGIN_SRC emacs-lisp
;; History
(setq-default history-length 1000)
(savehist-mode t)

;; Desktop Save
(setq desktop-path (list user-emacs-directory) 
      desktop-auto-save-timeout 300)
(desktop-save-mode 1)

;; Len of the maximal saved data to the desktop file
(setq desktop-globals-to-save
      (append '((comint-input-ring        . 50)
                (compile-history          . 30)
                desktop-missing-file-warning
                (dired-regexp-history     . 20)
                (extended-command-history . 30)
                (face-name-history        . 20)
                (file-name-history        . 100)
                (grep-find-history        . 30)
                (grep-history             . 30)
                (ido-buffer-history       . 100)
                (ido-last-directory-list  . 100)
                (ido-work-directory-list  . 100)
                (ido-work-file-list       . 100)
                (magit-read-rev-history   . 50)
                (minibuffer-history       . 50)
                (org-clock-history        . 50)
                (org-refile-history       . 50)
                (org-tags-history         . 50)
                (query-replace-history    . 60)
                (read-expression-history  . 60)
                (regexp-history           . 60)
                (regexp-search-ring       . 20)
                register-alist
                (search-ring              . 20)
                (shell-command-history    . 50)
                tags-file-name
                tags-table-list)))


(use-package session
  :config
  (setq session-save-file (expand-file-name ".session" user-emacs-directory))
  (add-hook 'after-init-hook 'session-initialize))

(when (member :macos *sys-is*)
  (use-package frame-restore))
#+END_SRC

** Server
#+BEGIN_SRC emacs-lisp
(use-package server
  :config (unless (server-running-p)
            (server-start)))
#+END_SRC
** Shell
#+begin_src emacs-lisp
;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")
#+end_src
** Dired
#+BEGIN_SRC emacs-lisp

(add-hook 'dired-mode-hook 'auto-revert-mode)

;; (setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)

(setq dired-isearch-filenames 'dwim)
(setq-default diredp-hide-details-initially-flag nil
              dired-dwim-target t)

(use-package dired+)

(use-package dired-sort)

#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
;;; Startup
(setq org-startup-indented t)

;;; Edit
(setq org-catch-invisible-edits t)

;;; Speed command
(setq org-use-speed-commands t)

;;; Image
(setq org-image-actual-width 550)

;;; Org activation bindings
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)

;;; Tag 
(setq org-tags-column 45)

;;; Clock
;; To save the clock history across Emacs sessions
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)


;;; Bebel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((lisp . t)
   (C . t)
   (shell . t)
   ;; (python . t)
   ;; (calc . t)
   ;; (latex . t)
   ;; (java . t)
   ;; (ruby . t)
   ;; (scheme . t)
   ;; (sqlite . t)
   ;; (js . t)
   ))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "emacs-lisp")
           (string= lang "lisp"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

;;; Source blocks
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t
      org-hide-block-startup t)

;; <_ <tab>
(add-to-list 'org-structure-template-alist
             '("cl" "#+BEGIN_SRC lisp\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" ""))
#+END_SRC

*** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
 
** For Mac
#+BEGIN_SRC emacs-lisp

(when (member :macos *sys-is*)
  ;; Keybinding 
  ;; Fn -> hyper : H
  (setq ns-function-modifier 'hyper)
  ;; Cmd -> meta : M
  (setq ns-command-modifier 'meta)
  ;; Opt -> super : S
  (setq ns-option-modifier 'super)
  
  ;; Disable commands
  (put 'ns-print-buffer 'disabled t)
  (put 'suspend-frame 'disabled t)

  ;; Font
  (setq mac-allow-anti-aliasing t)
  
  ;; Delete files -> trash
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")

  ;; GUI
  (when (member :window *sys-is*)
    ;; Don't make new frames when opening a new file with Emacs
    (setq ns-pop-up-frames nil)

    ;; Fullscreen!
    (setq ns-use-native-fullscreen nil) ; Not Lion style
    (bind-key "<s-return>" 'toggle-frame-fullscreen)

    ;; Disable minimizes to dock
    ;; (global-unset-key (kbd "C-z"))

    )

  ;; Play with OS
  (defun open-dir-in-finder ()
    "Open a new Finder window to the path of the current buffer"
    (interactive)
    (shell-command "open ."))
  
  (defun open-dir-in-iterm ()
    "Open the current directory of the buffer in iTerm."
    (interactive)
    (let* ((iterm-app-path "/Applications/iTerm.app")
           (iterm-path (if (file-directory-p iterm-app-path)
                           iterm-app-path)))
      (when iterm-path
        (shell-command (concat "open -a " iterm-path " .")))))
  
  ;; Lisp 
  (setq inferior-lisp-program "ccl64")
  
  ;; mdfind is the command line interface to Spotlight
  (setq locate-command "mdfind")

  ;; exec-path-from-shell : makes the command-line path with Emacs's shell match the same
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize)))

#+end_src

* Mode
** Dependency
#+BEGIN_SRC emacs-lisp
(use-package hydra)
(use-package paredit)
#+END_SRC
** UI
*** Smart mode line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :config (progn
            (setq sml/theme 'respectful)
            (setq sml/no-confirm-load-theme t)
            (sml/setup)
            (set-face-attribute `mode-line nil
                                :box nil)
            (set-face-attribute `mode-line-inactive nil
                                :box nil)
            ))
#+END_SRC
*** Ivy
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :config (progn 
            (ivy-mode 1)
            ;; Basic
            ;; (setq ivy-use-virtual-buffers t)
            (setq ivy-count-format "(%d/%d) ")
            (ivy-wrap t) ; cycle past the last and the first candidates 
            )
  :bind
  ("C-s" . swiper))
#+END_SRC
*** Helm
#+begin_src emacs-lisp
(use-package helm
  :diminish helm-mode
  :init 
  (progn
    (require 'helm-config)
    (setq helm-exit-idle-delay 0.1
          helm-input-idle-delay 0.01
          helm-idle-delay 0.0

          helm-M-x-requires-pattern nil
          
          ;; helm-truncate-lines t ;; Truncate long lines in helm completion
          ;;- don't use recentf stuff in helm-ff
          ;; helm-ff-file-name-history-use-recentf nil
          helm-ff-search-library-in-sexp t
          ;;- don't displace the header line
          ;; helm-display-header-line nil
          helm-ff-newfile-prompt-p nil
          helm-ff-skip-boring-files t
          
          ;; May be overridden if 'ggrep' is in path
          helm-grep-default-command
          "grep -a -d skip %e -n%cH -e %p %f"
          helm-grep-default-recurse-command
          "grep -a -d recurse %e -n%cH -e %p %f"
          
          ;; Candidates
          ;; Do not display invisible candidates
          helm-quick-update t
          ;; limit the number of displayed canidates
          helm-candidate-number-limit 100
          helm-yas-display-key-on-candidate t
          
          ;; Open helm buffer
          ;; in another window
          helm-split-window-default-side 'other
          helm-move-to-line-cycle-in-source nil
          helm-echo-input-in-header-line t
          ;; inside current window
          ;; don't occupy whole other window
          helm-split-window-in-side-p t

          ;; Fuzzy matching
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-completion-in-region-fuzzy-match t
          helm-ag-fuzzy-match t
          helm-locate-fuzzy-match t)
    (helm-mode 1))
  :bind
  (("C-c h" . helm-command-prefix)
   ("C-`" . helm-resume)
   ;; 
   ("M-x" . helm-M-x)
   ("C-x b" . helm-mini)
   ("C-x C-b" . helm-buffers-list)
   ("C-x f" . helm-find-files)
   ("C-x C-f" . helm-find-files)
   ("M-y" . helm-show-kill-ring)
   ;; ("C-c h SPC" . helm-all-mark-rings)
   ("C-c h x" . helm-register)
   
   ("C-h a" . helm-apropos)
   ("C-c h o" . helm-occur)
   ("M-g ." . helm-do-grep)
   
   ("C-c h m" . helm-man-woman)))

;; rebind tab to do persistent action
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
;; make TAB works in terminal
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
;; list actions using C-z
(define-key helm-map (kbd "C-z")  'helm-select-action)


(when (member :macos *sys-is*)
  (setq helm-locate-command "mdfind -interpret -name %s %s"))
#+end_src

**** helm-descbinds
#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :config (helm-descbinds-mode)
  :bind 
  (("C-h b" . helm-descbinds)
   ("C-h w" . helm-descbinds)))
#+END_SRC

** View
*** pos-tip
#+BEGIN_SRC emacs-lisp
(use-package pos-tip)
#+END_SRC
*** Undo tree mode
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    ;; (setq undo-tree-visualizer-diff t)
    (define-key undo-tree-map (kbd "C-x u") 'undo-tree-visualize)
    (define-key undo-tree-map (kbd "C-/") 'undo-tree-undo)))
#+END_SRC
*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :config
    (add-hook 'css-mode-hook 'rainbow-mode))
#+END_SRC

*** Beacon mode
#+BEGIN_SRC emacs-lisp
; flashes the cursor's line when you scroll
(use-package beacon
  :config
  (beacon-mode 1)
  (setq beacon-color "#ffffff"))
#+END_SRC
** Jump
*** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  (("C-;" . 'avy-goto-char)
   ;; ("C-'" . 'avy-goto-char-2)
   ("M-g g" . 'avy-goto-line)
   ;; ("M-g e" . 'avy-goto-word-0)
   ("M-g w" . 'avy-goto-word-1)))
#+END_SRC

*** Ace Window
#+begin_src emacs-lisp
(use-package ace-window
  :config
  (progn
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (ace-window-display-mode))
  :bind ("s-o" . ace-window))
#+end_src
** Edit
*** Multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :config
  (setq mc/always-run-for-all t))

(bind-key "M-<down-mouse-1>" 'mc/add-cursor-on-click)

#+end_src
**** Hydra-mc
#+BEGIN_SRC emacs-lisp
(global-set-key
 (kbd "C-S-c")
 (defhydra hydra-mc  (:columns 5)
   "multiple-cursors"
   ("ll" mc/edit-lines "lines")
   ("le" mc/edit-ends-of-lines "end-lines")
   
   ("j" mc/mark-next-like-this "next")
   ("uj" mc/unmark-next-like-this "un-n")
   ("J" mc/skip-to-next-like-this "skip-n")
   ("s" #'mc/mark-next-like-this-symbol "symbols-n")

   ("k" mc/mark-previous-like-this "prev")
   ("uk" mc/unmark-previous-like-this "un-p")
   ("K" mc/skip-to-previous-like-this "skip-p")
   
   ("aa" mc/mark-all-like-this "all")
   ("A" mc/mark-all-dwim "dwim")
   ("aw" #'mc/mark-all-words-like-this "word")
   ("as" mc/mark-all-symbols-like-this-in-defun "symbols-in-def")
   
   ("r" #'mc/mark-all-in-region-regexp "region-regexp")
   ;; Quit
   ("q" nil "Quit" :color blue)))

;; ("i" mc/insert-numbers)
;; ( "h" mc-hide-unmatched-lines-mode)
;; ( "dr" mc/reverse-regions)
;; ( "ds" mc/sort-regions)

#+END_SRC
*** whole-line-or-region
#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :diminish whole-line-or-region-mode
  :config
  (whole-line-or-region-mode t)
  (make-variable-buffer-local 'whole-line-or-region-mode))
#+END_SRC
*** Smartparens mode
#+begin_src emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :config 
  (progn 
    (require 'smartparens-config)
    (show-smartparens-global-mode 1)
    (smartparens-global-mode t)))
#+end_src


** Search
*** Ag
#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag)
#+END_SRC
**** Helm-ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :bind
  (("C-c h a" . helm-do-ag)
   ("M-g >" . helm-ag-this-file)
   ("M-g ," . helm-ag-pop-stack)))
#+END_SRC
*** helm-swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :bind 
  (("M-i" . helm-swoop)
   ("M-I" . helm-swoop-back-to-last-point)
   ("C-c M-i" . helm-multi-swoop))
  :config
  (progn
    ;; When doing isearch, hand the word over to helm-swoop
    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
    ;; From helm-swoop to helm-multi-swoop-all
    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
    ;; Save buffer when helm-multi-swoop-edit complete
    (setq helm-multi-swoop-edit-save t
          ;; If this value is t, split window inside the current window
          helm-swoop-split-with-multiple-windows nil
          ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
          helm-swoop-split-direction 'split-window-vertically
          ;; If nil, you can slightly boost invoke speed in exchange for text color
          helm-swoop-speed-or-color nil
          helm-swoop-use-fuzzy-match nil)))


#+END_SRC
** Assist
*** Winner mode
#+begin_src emacs-lisp
(winner-mode t)
#+end_src
*** Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (progn
    (which-key-mode)
    (which-key-setup-side-window-bottom)))
#+END_SRC
*** Completion
#+BEGIN_SRC emacs-lisp
;; ignore-case
(setq completion-ignore-case t)
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (progn
    ;; not always down case
    (setq company-dabbrev-downcase nil)

    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-auto-complete nil)
    (setq company-show-numbers t)
    (setq company-idle-delay 0)
    (setq company-require-match nil))
  :bind
  ("C-M-<tab>" . company-complete))

(use-package company-statistics
  :config (add-hook 'after-init-hook 'company-statistics-mode))

(use-package company-quickhelp
  :config
  (company-quickhelp-mode 1)
  (setq company-quickhelp-delay nil))

;; flx based fuzzy matching for company
(use-package company-flx
  :config (company-flx-mode 1))


(define-key company-active-map (kbd "C-h") 'company-quickhelp-manual-begin)
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-active-map (kbd "C-d") 'company-show-doc-buffer)
(define-key company-active-map (kbd "M-.") 'company-show-location)


#+END_SRC

**** slime
#+BEGIN_SRC emacs-lisp
(use-package slime-company
  :config (setq slime-company-completion 'fuzzy))
  #+END_SRC

*** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (progn
    (yas-global-mode)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "M-/") 'yas-expand)
    (define-key yas-minor-mode-map (kbd "s-i") #'yas-insert-snippet)
    
    (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
    (setq yas-expand-only-for-last-commands '(self-insert-command))))

;; snippet collection
(use-package yasnippet-snippets)
#+end_src
*** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :commands projectile-mode
  :config
  (progn
    (projectile-global-mode t)
    (setq projectile-enable-caching t)
    (setq projectile-keymap-prefix (kbd "C-c C-p"))))
#+end_src
**** helm-projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :commands helm-projectile
  :bind ("C-c p h" . helm-projectile)
  :init
  (helm-projectile-on)
  :config
  (progn
    (setq projectile-completion-system 'helm)
    (setq projectile-indexing-method 'alien)))

#+END_SRC
*** Expand Region
#+BEGIN_SRC emacs-lisp
;; expand the marked region in semantic increments 
;; (prefix : negative : reduce region)
(use-package expand-region
  :config
  :bind
  (("C-=" . 'er/expand-region)))
  
  #+END_SRC

** Programming
*** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :config
  (progn
    ;; (global-flycheck-mode)
    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*Flycheck errors*" eos)
                   (display-buffer-reuse-window
                    display-buffer-in-side-window)
                   (side            . bottom)
                   (reusable-frames . visible)
                   (window-height   . 0.33)))))
#+end_src
*** Helm gtags
#+BEGIN_SRC emacs-lisp
(setenv "GTAGSLIBPATH" (expand-file-name ".gtags/" (getenv "HOME")))

(use-package helm-gtags
  :config
  (progn
    (setq helm-gtags-ignore-case t
          helm-gtags-auto-update t
          helm-gtags-use-input-at-cursor t
          helm-gtags-pulse-at-cursor t
          ;; helm-gtags-path-style 'absolute
          helm-gtags-prefix-key (kbd "C-c h g")
          helm-gtags-suggested-key-mapping t)

    ;; Enable helm-gtags-mode in Dired so you can jump to any tag
    ;; when navigate project tree with Dired
    (add-hook 'dired-mode-hook 'helm-gtags-mode)

    ;; Enable helm-gtags-mode in Eshell for the same reason as above
    (add-hook 'eshell-mode-hook 'helm-gtags-mode)

    ;; Enable helm-gtags-mode in languages that GNU Global supports
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c-mode-common-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (add-hook 'java-mode-hook 'helm-gtags-mode)
    (add-hook 'asm-mode-hook 'helm-gtags-mode)

    ;; key bindings
    (with-eval-after-load 'helm-gtags
      (define-key helm-gtags-mode-map (kbd "C-c h g a") 'helm-gtags-tags-in-this-function)
      (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
      (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
      (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
      (define-key helm-gtags-mode-map (kbd "C-.") 'helm-gtags-find-tag)
      (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
      (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))))

#+END_SRC
*** Irony
#+BEGIN_SRC emacs-lisp
(use-package irony
  :config
  (progn
    ;; If irony server was never installed, install it.
    (unless (irony--find-server-executable) (call-interactively #'irony-install-server))

    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)

    ;; Use compilation database first, clang_complete as fallback.
    (setq-default irony-cdb-compilation-databases '(irony-cdb-libclang
                                                    irony-cdb-clang-complete))
    
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)))

#+END_SRC
**** company-irony
#+BEGIN_SRC emacs-lisp
(use-package company-irony
  :config
  (progn
    (add-to-list 'company-backends 'company-irony)))
#+END_SRC
**** flycheck-irony
#+BEGIN_SRC emacs-lisp
(use-package flycheck-irony
  :config
  (progn
    (add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))
#+END_SRC
**** irony-eldoc
#+BEGIN_SRC emacs-lisp
(use-package irony-eldoc
  :config
  (progn
    (add-hook 'irony-mode-hook #'irony-eldoc)))
#+END_SRC
** Lisp
*** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC
*** Redshank
#+BEGIN_SRC emacs-lisp
(use-package redshank
  :diminish redshank-mode)

(unbind-key "M-<down-mouse-1>" redshank-mode-map)
#+END_SRC
*** Slime
**** Roswell
#+BEGIN_SRC emacs-lisp
;;; Roswell
(load (expand-file-name "~/.roswell/helper.el"))
(setq inferior-lisp-program "ros -Q run")
(setf slime-lisp-implementations
      `((sbcl    ("sbcl" "--dynamic-space-size" "2000"))
        (ccl    ("ccl64"))
        (ros-sbcl ("ros" "-L" "sbcl" "run"))
        (roswell ("ros" "-Q" "run"))))
(setf slime-default-lisp 'roswell)
#+END_SRC
**** COMMENT Manual
#+BEGIN_SRC emacs-lisp
(use-package slime
  :config
  (require 'slime-autoloads)
  ;; (setq inferior-lisp-program "~/ccl/dx86cl64")
  (slime-setup '(slime-fancy))
  
  (when (executable-find "sbcl")
    (add-to-list 'slime-lisp-implementations
                 '(sbcl ("sbcl") :coding-system utf-8-unix)))
  (when (executable-find "ccl64")
    (add-to-list 'slime-lisp-implementations
                 '(ccl ("ccl64") :coding-system utf-8-unix)))

  (setq slime-default-lisp 'ccl)       ; select : M-- M-x slime ccl

  (setq slime-net-coding-system 'utf-8-unix)
  ;; We tell slime to not load failed compiled code
  (setq slime-load-failed-fasl 'never)
  (setq slime-complete-symbol*-fancy t))

#+END_SRC
*** Lispy
#+BEGIN_SRC emacs-lisp
(use-package lispy
  :config
  ;; slime-repl
  (defun xt3/newline-and-indent ()
    (interactive)
    (if (eq major-mode 'slime-repl-mode)
        (slime-repl-newline-and-indent)
      (lispy-newline-and-indent)))

  (substitute-key-definition 'lispy-newline-and-indent
                             'xt3/newline-and-indent
                             lispy-mode-map)
  ;; Colon no space
  (defun xt3/lisp-colon ()
    "Insert :."
    (interactive)
    (insert ":"))
  (substitute-key-definition 'lispy-colon 'xt3/lisp-colon lispy-mode-map)

  (add-to-list 'lispy-goto-symbol-alist
               '(slime-repl-mode lispy-goto-symbol-lisp le-lisp))
  :bind
  ("C-M-," . lispy-mark))
#+END_SRC
*** Elisp-slime-nav
#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :config 
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'elisp-slime-nav-mode)))
#+END_SRC
*** Doc
#+BEGIN_SRC emacs-lisp
(setq common-lisp-hyperspec-root
      (concat "file://" (expand-file-name "~/.emacs.d/HyperSpec/")))    

(setq common-lisp-hyperspec-symbol-table
      (concat common-lisp-hyperspec-root "Data/Map_Sym.txt"))

(use-package w3m)
(setq browse-url-browser-function
      '(("/HyperSpec" . w3m-browse-url)
        ("." . browse-url-default-browser)))
#+END_SRC

** C
*** Edit
#+BEGIN_SRC emacs-lisp
;; Senator
#+END_SRC
*** Navigation
- Current buffer
  #+BEGIN_SRC emacs-lisp
(use-package function-args
  :config
  ;; (fa-config-default)
  (define-key c-mode-map (kbd "C-c j") #'moo-jump-local ))
#+END_SRC
- Header file : sematic
  #+BEGIN_SRC emacs-lisp
(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(global-semantic-stickyfunc-mode 1)
;; (global-semantic-idle-summary-mode 1)
;; mini-buf show interface info
(semantic-mode 1)
 
(defun alexott/cedet-hook ()
  (local-set-key "\C-c\C-j" 'semantic-ia-fast-jump)
  (local-set-key "\C-c\C-s" 'semantic-ia-show-summary)
  (set (make-local-variable 'company-backends) 
       (remove 'company-capf company-backends)) )

(add-hook 'c-mode-common-hook 'alexott/cedet-hook)
(add-hook 'c-mode-hook 'alexott/cedet-hook)
(add-hook 'c++-mode-hook 'alexott/cedet-hook)

(delete 'company-semantic company-backends)
  #+END_SRC
- Project : helm gtags
*** Format
#+BEGIN_SRC emacs-lisp
;; Auto cleanup trailing space
(use-package ws-butler
  :config
  (add-hook 'c-mode-common-hook 'ws-butler-mode))
#+END_SRC
*** Completion
**** C-header
#+BEGIN_SRC emacs-lisp
(use-package company-c-headers
  :config
  (add-to-list 'company-backends 'company-c-headers))  
  #+END_SRC
*** Syntax Chack
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook #'flycheck-mode)
#+END_SRC
*** Folding
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook 'hs-minor-mode)
#+END_SRC

** Web
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (append
       '(("\\.js\\'" . js2-mode))
       '(("\\.html\\'" . web-mode))
       auto-mode-alist))

#+END_SRC
*** Web Mode
#+begin_src emacs-lisp
(use-package web-mode
  :config
  (progn
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-auto-closing t) ;; </ -> </..>
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-auto-pairing t)))
#+end_src

*** Emmet
#+begin_src emacs-lisp
(use-package emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  ;; Auto-start on any markup modes
  (add-hook 'sgml-mode-hook 'emmet-mode))
#+end_src

*** Impation Mode 
#+BEGIN_SRC emacs-lisp
(use-package impatient-mode)
;; Require: Simple-httpd, Htmlize
#+END_SRC

*** Javascript
- js2
  #+BEGIN_SRC emacs-lisp
(use-package js2-mode)
  #+END_SRC
- tern
  #+BEGIN_SRC emacs-lisp
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
  #+END_SRC

** Git
*** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+END_SRC

* Supply
** Edit
#+BEGIN_SRC emacs-lisp
(defun sanityinc/kill-back-to-indentation ()
  "Kill from point back to the first non-whitespace character on the line."
  (interactive)
  (let ((prev-pos (point)))
    (back-to-indentation)
    (kill-region (point) prev-pos)))

(bind-key "C-M-<backspace>" 'sanityinc/kill-back-to-indentation)
#+END_SRC
** Complete
#+BEGIN_SRC emacs-lisp
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))

(defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

(defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))

(global-set-key [tab] 'tab-indent-or-complete)
#+END_SRC
** Lisp
#+BEGIN_SRC emacs-lisp
(defun xt3/lisp-setup ()
  "Enable features useful in any Lisp mode."
  (rainbow-delimiters-mode t)
  (redshank-mode)
  (lispy-mode 1))

(defconst xt3/elispy-modes
  '(emacs-lisp-mode ielm-mode)
  "Major modes relating to elisp.")

(defconst xt3/lispy-modes
  (append xt3/elispy-modes
          '(lisp-mode inferior-lisp-mode lisp-interaction-mode slime-repl-mode))
  "All lispy major modes.")

(require 'derived)

(dolist (hook (mapcar #'derived-mode-hook-name xt3/lispy-modes))
  (add-hook hook 'xt3/lisp-setup))

(dolist (hook (mapcar #'derived-mode-hook-name
		      '(lisp-mode
			inferior-lisp-mode
			lisp-interaction-mode
			slime-repl-mode)))
  (add-hook hook (lambda ()
                   (set (make-local-variable 'company-backends)
                        (cons 'company-slime company-backends)))))

#+END_SRC
** Hydra
*** Window
#+BEGIN_SRC emacs-lisp
(global-set-key
 (kbd "<f2>")
 (defhydra f2-fun (:color pink :hint nil)
   "
Window
^ Resize ^         ^ Move ^       ^Split^      ^Delete
^^^^^^^^-----------------------------------------------------------------
_e_: enlarge         ^_i_^          _v_:|      _dw_:del-current
_s_: shrink       _j_     _l_       _x_:-      _da_:ace-del
_E_: enlarge-<>      ^_k_^          _|_:>move  _do_:del-other
_S_: shrink-<>     _ws_:swap      ___:Vmove ^ ^_db_:kill-buf
_bw_: balance      ^<Jump>^         ^^^^       _df_:del-frame 
^ ^                _a_:ace _f_:to-frame
"

   ("e" #'enlarge-window)
   ("s" #'shrink-window)
   ("E" #'enlarge-window-horizontally)
   ("S" #'shrink-window-horizontally)
   ("bw" #'balance-windows)
   ;; Move
   ("j" #'windmove-left)
   ("i" #'windmove-up)
   ("l" #'windmove-right)
   ("k" #'windmove-down)
   ("ws" ace-swap-window)
   ;; Jump
   ("a" ace-window :exit t)
   ("f" #'select-frame-by-name :exit t)
   ;; Spilt
   ("|" (lambda ()
          (interactive)
          (split-window-right)
          (windmove-right)))
   ("_" (lambda ()
          (interactive)
          (split-window-below)
          (windmove-down)))
   ("v" #'split-window-right)
   ("x" #'split-window-below)
   ;; Delete
   ("da" ace-delete-window)
   ("dw" delete-window)
   ("do" delete-other-windows :exit t)
   ("db" kill-this-buffer)
   ("df" delete-frame :exit t)
   ;; Misc
   ("t" transpose-frame "-<->|")
   ("nf" new-frame "New-frame" :exit t)
   ("z" #'text-scale-adjust "Zoom" :exit t)
   ;;
   ("q" nil "Quit" :color blue)))
#+END_SRC

* Xt3
#+BEGIN_SRC emacs-lisp
;; (setq xt3-lisp (expand-file-name "xt3Lisp.el" user-emacs-directory))
;; (load xt3-lisp)
#+END_SRC

