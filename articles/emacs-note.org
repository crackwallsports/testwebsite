#+TITLE: Emacs - 笔记整理 (草稿)
#+AUTHOR: Xt3
#+OPTIONS: html-postamble:nil html-style:nil tex:nil
#+HTML_DOCTYPE: html5
#+HTML_HEAD:<link href="/testwebsite/css/org.css" rel="stylesheet"></link>


* COMMENT Generate
#+BEGIN_SRC lisp
(gen-with-frame "Emacs Note"
                #P"articles/emacs-note.html")
#+END_SRC

* Setup 安装
- OSX : [[http://emacsformacosx.com][Emacs For Mac OS X]]
- Linux : 用包管理器安装

* Package Manager 包管理器
- M-x package-list-packages
- [[https://github.com/jwiegley/use-package][use-package]]

* Coonfig 配置
- 个人喜好 : ~/.emacs.d/init.el -(org-babel)-> ~/.emacs.d/config.org
- 配置文件(下载): [[file:Emacs/init.el][init.el]] [[file:Emacs/config.org][config.org]]

* Basic 基础
** UI 用户界面
- Menu 菜单栏 : 屏幕顶部突出显示的条
- Frame 框架
  - Window 窗口
    - Buffer 缓冲区 : 关联文件
- Mode Line 模式行 (状态栏) : 每个窗口中 横贯底部的高亮条 提供当前缓冲区的信息
- Echo Area : 模式行下面 底部的区域 显示相关信息

Mode Line  
- [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]]

** Mode 模式
- 主要模式 major-mode : 主要的编辑行为 仅用于当前缓冲区 仅有一个活动的主模式 
- 次要模式 minor-mode : 提供了一些与任何特定的主要模式无关的特性或功能 可多个
** Keybinding 键绑定
组合键
- Ctrl (C)
- Meta (M) 
  - 输入 Meta
    - Alt
    - Esc (按下 Esc, 松开, 再按其它键)
    - Ctrl-[ 代替 Esc (通过网络运行 Emacs, 无法使用 Esc 和 Alt 键时)
- For Mac
  #+BEGIN_SRC emacs-lisp
;; Fn -> hyper : H
(setq ns-function-modifier 'hyper)
;; Cmd -> meta : M
(setq ns-command-modifier 'meta)
;; Opt -> super : S
(setq ns-option-modifier 'super)
  #+END_SRC

常用的缺省按键前缀
- 当前编辑模式特有的命令 : C-c
- 文件和缓冲区命令 : C-x
- 帮助命令 : C-h
- 命令 : M-x

** Command 命令
每一个命令 == 一个功能(Elisp函数) 

| 退出 Emacs | C-x C-c (confirm-kill-emacs)        |
| 取消       | C-g == keyboard-quit 或 ESC ESC ESC |
| 执行 命令  | M-x == execute-extended-command     |

** Help 帮助
- Tutorial : C-h t
- Manual : C-h r == info-emacs-manual
  - Online : [[https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html][Emacs manual]]
- 当前模式|变量|函数|键绑定|符号
  | C-h m | describe-mode|
  | C-h v | describe-varible|
  | C-h f | describe-function |
  | C-h b | describe-bindings|
  | C-h o | describe-symbol|
- 通过键盘 输入一个键绑定
  | C-h c | describe-key-briefly|
  | C-h k | describe-key|

** Server 服务
- 开启服务 : M-x server-start
  - 初始文件 <<
    #+BEGIN_SRC emacs-lisp
(server-start)
    #+END_SRC
- 客服端 : emacsclient    
  - -t <filename>  : open a new frame on the terminal
  - -c : open a new X frame
  - -n, --no-wait	: Don't wait for the server to return

* Begining 开始
入门 Emacs 是很简单的事 网络上能够搜索出大量的入门文章和视频 \\
所以呢 我不打算 做一些重复的工作 \\
换个角度来试试看 \\

编辑器 用来做什么? 编辑文本 写代码 写书 收发邮件 浏览网页 看图片 看视频 ...

从 编辑文本 开始 : 需要什么?

- Move|Jump 移动或跳转 :
  - 要在 Buffer中移动 : 字符 单词 行
  - 跳到 不同的 Window中 或 Frame中
- Edit 编辑
  - 选中 : 选择需要编辑的部分文本
  - 插入
  - 删除
  - 复制 粘贴 剪切
  - 撤销 重做
  - 处理 : 执行一些特定的功能 如 转换大小写
- Search 搜索
- Repeat 重复
- Assist
  - Manipulating pairs : smartparens
  - Narrowing
  - Folding

Emacs 是基于文本的 所以 对文本的操作 可以贯穿各种场景 然后根据特定的需要 使用不同的模式 提供更多的功能
- 主模式
  - Org
  - Dired
- 次要模式
  - abbrew

再到 我要写代码 建立开发环境 需要什么?
- Completion : company
- Syntax Checking : flycheck
- Format (style, highlight, indent )
- Navigation (tag, definition, symbols)
- Code Templates & Snippets : yasnippet
- Project : progectile, Speedbar
- Doc
- Enhancement Edit
- Assist
- Compilation
- Debugging

特定的语言 又需要什么?
- Common lisp
  - Slime
  - Enhancement Edit : paredit, lispy
  - Completion : company-slime
- C

* Move 移动 & Jump 跳转
光标的定位 (屏幕可视范围内)

Buffer
- 左右
  - C-b|f == (backward|forward)-char 
  - M-b|f == (backward|forward)-word 
- 上|下
  - C-p|n == (previous|next)-line
- 行-首|尾
  - C-a|e == (beginning|end)-of-line
- 句子-首|尾
  - M-a|e == (backward|forward)-sentence
- 段落-首|尾
  - M-{|} == (backward|forward)-paragraph
- 翻页-上|下
  - M|C-v == PgUp|PgDn | scroll-(up|down)-command
- 缓冲区-首|尾
  - M-<|> == (beginning|end)-of-buffer
- 到本行第一个非空字符
  - M-m == back-to-indentation
- N-行
  - M-g (g|M-g) == goto-line
- 当前缓冲区可视区域-(Top|Center|Bottom)
  - M-r == move-to-window-line-top-bottom

Window  
- C-x o == other-window

Frame
- M-x select-frame-by-name

Assist
- Wind Move
  - M-x windmove-(left|right|up|down)
- [[https://github.com/abo-abo/ace-window][Ace Window]]
  - M-x ace-window (Me: == S-o)
- [[https://github.com/abo-abo/avy][Avy]]
  - M-x avy-goto-(char|word-1|line)

Supplement
#+BEGIN_SRC emacs-lisp
;; 设置 sentence-end 可以识别中文标点
(setq sentence-end
      "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
#+END_SRC

* Edit 编辑
- 选中 (标记) : 选择需要编辑的部分文本
- 插入
- 删除 剪切 复制 粘贴
- 撤销 重做
- 处理 : 执行一些特定的功能 如 转换大小写
- 特性 : 矩形区块
  
** Mark 标记
选中 需要编辑的部分文本

- 标记
  - 点
    - C-(<SPC>|@) == set-mark-command (激活) 
    - C-<SPC> C-<SPC> (不激活 但进入标记环)
  - 段落
    - M-h == mark-paragraph
  - 缓冲区
    - C-x h == mark-whole-buffer 
  - Mouse shift-selection
    - Shift-<Mouse>
- 标记环 (Mark Ring : 标记的点 进入 标记环) [Global|Local]
  - 最后标记点
    - C-u C-<SPC> (当前缓冲) 
    - C-x C-<SPC> == pop-global-mark
  - 列表
- 互换位置-插入点和标记点
  - C-x C-x == exchange-point-and-mark

Special
- 标记 表达式 
  - C-M-@ == mark-sexp
- 标记 定义
  - C-M-h == mark-defun

Assist
- 标记环列表: [[https://github.com/emacs-helm/helm][Helm]]
  - M-x helm-mark-all-rings | helm-[global]-mark-ring
- [[https://github.com/magnars/expand-region.el][expand-region]] : er/expand-region == C-=

Supplement
- 整行
  #+BEGIN_SRC emacs-lisp
(defun xt3/sel-cur-line ()
  (interactive)
  (set-mark (line-end-position))
  (beginning-of-line))
(bind-key "C-x M-h" #'xt3/sel-cur-line)
#+END_SRC
** Insert 插入
Input 输入
- 可见的(图形字符) : a..z , 1..0, !..?  
- 控制字符 : <SPC>, <RET>, <TAB>, <DEL>, <ESC>, <F1>, <Home>, <LEFT>
  - 插入空白行 : <RET> | C-j | C-o 
- 修饰键 : <Control>, <META>
- 输入 对应 命令 
- 非键盘 : mouse(鼠标) (一般作为定位 特殊模式 拖拽绘制字符)
- 引用插入
  - C-q == quoted-insert
  - 不可见(非图形字符)
    - <Ret>, C-l(分页符)
    - 033 Enter (Ascii 八进制) = f
- Unicode
  - C-x 8 RET
  - 速记 : C-x 8 C-h £
  - ∑ (2211) ⤶ (2936)

Assist
- Input Method 输入法
  - 内置
    - 触发 : toggle-input-medthod == C-\
    - 切换 : select-input-medthod == C-u C-\ | C-x Ret C-\
    - 示例 :
      - Tex α x₃ X³
        #+BEGIN_EXAMPLE
        \alpha α  \Gamma Γ
        \rightarrow →  \Leftarrow ⇐ 
        \oplus ⊕  \int ∫
        x_3 x₃  v^x vˣ
        #+END_EXAMPLE
      - greek-babel αΑ Γγ η 
        #+BEGIN_EXAMPLE
        Αα Ββ Γγ Δδ Εε Ζζ  Ηη Θθ Ιι Κκ Λλ Μμ 
        Aa Bb Gg Dd Ee Zz  Hh Jj Ii Kk Ll Mm 
      
        Νν Ξξ Οο Ππ Ρρ Σσς Ττ Υυ Φφ Χχ Ψψ Ωω
        Nn Xx Oo Pp Rr Ssc Tt Uu Ff Qq Yy Ww
      #+END_EXAMPLE
- 使用操作系统的 输入法 或 其它工具 
- Abbrev mode
  - zhw -> hello world hello world 
- 补全 
  - [[https://company-mode.github.io/][company]]
  - [[https://github.com/auto-complete/auto-complete][auto-complete]]
  - [[https://github.com/joaotavora/yasnippet][yasnippet]]
    - yas-insert-snippet == s-i
- 来源 : 文件 | 其它缓冲
  - C-x i == insert-file
  - insert-buffer
** 删除 剪切 复制 粘贴
- 删除(delete) | 剪切(kill)
  - 区别 : kill 会把kill掉内容放到 kill ring 里
  - 字符|词 - 左|右
    - delete-backward-char == <Del>
    - delete-char == C-d
    - ---
    - backward-kill-word == (C|M)-<Del>
    - kill-word == M-d 
  - 行 - 右|左|整行
    - 右: kill-line == C-k
    - 左: M-0 C-k
    - 整: kill-whole-line  (-> [[https://github.com/purcell/whole-line-or-region/blob/master/whole-line-or-region.el][whole-line-or-region]] == C-w)
  - 句
    - kill-sentence == M-k
    - backward-kill-sentence == C-x <DEL>
  - 区域
    - kill-region == C-w  (-> [[https://github.com/purcell/whole-line-or-region/blob/master/whole-line-or-region.el][whole-line-or-region]])
- 复制-区域 
  - kill-ring-save == M-w (-> [[https://github.com/purcell/whole-line-or-region/blob/master/whole-line-or-region.el][whole-line-or-region]])
- 粘贴 (从 Kill ring (剪切环))
  - 最近一个: yank == C-y
  - yank-pop == M-y
  - 指定位置: (C-u|M-) [Num] C-y

Special
- 表达式 (exp) "exp" exp
  - C-M-k == kill-sexp

Assist
- Kill Ring :  [[https://github.com/emacs-helm/helm][Helm]]
  - helm-show-kill-ring == M-y
- [[https://github.com/purcell/whole-line-or-region/blob/master/whole-line-or-region.el][whole-line-or-region]] [[whole line or region][config]] : 区域激活 则应用到区域 否则 应用到当前行
- Copy Kill Move(Kill-[Goto]-Paste)
  - [[https://github.com/wyuenho/move-dup][move-dup]] (行|区域)
    - md/move-lines-[up|down]
    - md/duplicate-[up|down]
  - [[https://github.com/abo-abo/avy][Avy]]
    - avy-copy-[line|region] (单行|行范围)
    - avy-kill-[line|region]
    - avy-move-[line|region]
- 到字符之前
  - 右: M-z [char] == zap-to-char
  - 左: M-- M-z
- 连续-空格
  - delete-horizontal-space == M-\
- 空白行 (位置相关: 一个到无 | 多个到一个 | 跟随的全部)
  - delete-blank-lines == C-x C-o
- 重复行
  - delete-duplicate-lines  (keeps first)
    - C-u : keeps last
    - C-u C-u : only adjacent lines (邻近)
    - C-u C-u C-u : retains repeated blank lines
** Undo/Redo 撤销 重做
- 撤销/重做
  - Undo: undo == C-/
  - Redo: C-u C-/

Assist
- [[http://www.emacswiki.org/emacs/UndoTree][undo-tree]] [[Undo Tree][config]]
  - undo-tree-visualize == C-x u
  - Undo: undo-tree-undo == C-/
  - Redo: undo-tree-redo == C-?

** Multiple 多重
- rectangle 矩形区块
  - 插入
    - 空格: open-rectangle == C-x r o
    - 字符串: M-x string-insert-rectangle
    - 行号: rectangle-number-lines == C-x r N
      - C-u : set start number and format
  - 替代
    - 空格: clear-rectangle == C-x r c
    - 字符串: string-rectangle == C-x r t
  - 删除
    - delete-rectangle == C-x r d
    - 空格: M-x delete-whitespace-rectangle
  - 剪切 | 复制 | 粘贴
    - C-x r k == kill-rectangle
    - C-x r M-w == copy-rectangle-as-kill
    - C-x r y == yank-rectangle
- [[Keyboard Macro 键盘宏][Keyboard Macro 键盘宏]]
 
Assist
- [[https://github.com/magnars/multiple-cursors.el][Multiple cursors]] [[Mutiple cursors][config]] [[hydra mc][kbd]]

** Other 其它
- 缩进    
  - 按上一行的格式: indent-region == M-C-\ == <Tab>
  - 区域: indent-rigidly == C-x <Tab> == C-x C-i    
- 行操作
  - 开新
    - open-line == C-o
    - newline-and-maybe-indent == C-j
  - 分割
    - split-line == M-C-o
  - 连接-前|后
    - delete-indentation == M-^  (反向: C-u ..)
- 调换-前|后
  - transpose-(chars|words) == (C|M)-t
- 转换-大小写
  - (capitalize|uppercase|downcase)-word == M-(c|u|l) (反向: M-- ..)
  - (upcase|downcase)-region == C-x C-(u|l)
- Narrowing : 当前缓冲 进入部分编辑 不影响缓冲其它部分 
  - 进入: narrow-to-(region|page|defun) == C-x n (n|p|d)
    - org-narrow-to-(subtree|block|element) == C-x n (s|b|e)
  - 退出: widen == C-x n w

*** Align 对齐
- align (align-rules-list)
- align-(current|entire|newline-and-indent)
- align-regexp (C-u ..)

Assist
- [[https://github.com/mkcms/interactive-align][ialign]]

*** Sort 排序
- 按-行|列|段|页
  - sort-(lines|columns|paragraph|pages) 
    - paragraph <- paragraph-start, paragraph-separate
    - 反序: C-u ..
- sort-numeric-fields     (base: sort-numeric-base)
- sort-fields (第几字段: C-u [N] | M-[N])
- 正则表达式 : sort-regexp-fields
  - word : (\w) \1
  - words : (\w+) \1    
- 反序
  - M-x reverse-region
- 忽略大小写 : sort-fold-case = t

* Search 搜索 & Replace 替换
Search
- isearchn (Incremental search)
  - 前|后 (重复-切换搜索到的词)
    - isearch-(forward|backward) == C-(s|r)
    - isearch-(forward|backward)-regexp == C-M-(s|r)
    - isearch-forward-(word|symbol) == M-s (w|_)
    - isearch-forward-symbol-at-point == M-s .
  - Activated (C-s ..)
    - Paste : C-y
    - History : M-n|p
    - 大小写敏感 : M-c
    - C-w  (光标处到下一个词的词尾) 
    - C-(s|r) ( 同向: 重复上一次搜索; 反向: 切换搜索方向)
    - 非增量 : RET
    - Regex : M-r
- occor
  - M-s o == occur
    - -> *Occur* buffer
    - e : occur-edit-mode : Edit current *Occur* buffer
      - exit : C-c C-c
    - next|previous : M-g (n|p)
    - repeat : C-x z
    - next|previous line : C-n|p
    - beginning|end of buffer : <|>
    - refresh : g 
    - Jump to match : o
    - Jump to match but point remainon *Occur* : C-o
    - help : h 
    - quit : q
  - multi-occur (multiple buffers)
    - M-x multi-occur		
    - M-x multi-occur-in-matching-buffers
- grep
  - M-x grep
  - Asynchronously : M-x lgrep
  - M-x grep-find | find-grep

Replace
- 所有: replace-(string|regexp)
- 问询
  - query-replace == M-%
  - query-replace-regexp == C-M-%
  - 选项
    - 退出 : <Enter>|q
    - 替换当前 : <Spc>|y
    - 替换-所有 : !
    - 跳过 : <Del>|n
    - 退回-到前一次替换 : ^
    - 替换当前 且 退出 : .
    - 替换当前 且 光标移动到此处 且 退出 : ,
    - 撤销-前一个|所有 : u|U 
    - 递归编辑 : C-r
      - 退出 : C-M-c
    - 删除-这个匹配 并 进入递归编辑 : C-w
    - 退出-递归编辑 和 问询 : C-]
    - 编辑-替换的字符串 : E


Assist
- Swiper : [[https://github.com/abo-abo/swiper][Ivy]]-Swiper [[https://github.com/abo-abo/swiper-helm][Swiper-helm]]
  - C-s ..
    - Paste : C-y | M-y(Kill Ring)
    - Next|Previous : C-(n|p)
- [[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]] == M-i
  - (M-[N] 显示周围行)
  - 多缓冲: helm-multi-swoop == C-c M-i
  - 所有缓冲: helm-multi-swoop-all
  - Edit mode : C-c C-e
- [[https://github.com/Wilfred/ag.el][Ag]] : [[https://github.com/syohex/emacs-helm-ag][helm-ag]]
- [[https://github.com/magnars/multiple-cursors.el][Multiple cursors]] [[Mutiple cursors][config]] [[hydra mc][kbd]]

Special
- imenu : helm-imenu
  - helm-semantic-or-imenu == C-c h i
- Search engines : helm-surfraw == C-c h s
  - brew install surfraw
- Project : [[http://batsov.com/projectile/][Projectile]]

* Repeat 重复
- 多次运行同一个命令
  - universal-argument == C-u [N] (缺省次数: 4)
  - digit-argument == (C|M)-[N]
  - C-u [C-u]*  (4^n)
- 上一条命令 (一次或多次)
  - repeat == C-x z ... z
- 复杂命令
  - repeat-complex-command == C-x ESC ESC | C-x M-:

Assist
- [[Keyboard Macro 键盘宏][Keyboard Macro 键盘宏]]
- [[https://github.com/magnars/multiple-cursors.el][Multiple cursors]] [[Mutiple cursors][config]] [[hydra mc][kbd]]


* Assist 辅助
** Information 信息
- 词数
  - count-words-region ~==~ M-=  (缓冲: C-u ..)
  - M-x count-words (缓冲|区域)
- 行数: M-x count-lines-region
- 字符信息
  - what-cursor-position ~==~ C-x =  (编码 第几个字符 第几列)
  - M-x describe-char  (详细信息)

** Keyboard Macro 键盘宏
- 开始|结束
  - (start|end)-kbd-macro == C-x (|) | <F3>|<F4>
  - 追加: C-u C-x (
- 执行 
  - call-last-kbd-macro == C-x e | <F4>
  - M-x (Macro Name) | helm-execute-kmacro
- 终止
  - C-g
- 命名 
  - M-x name-last-kbd-macro
** Abbrev 缩写
- 添加
  - 全局: add-global-abbrev == C-x a g
  - 当前主要模式: C-x a l == add-mode-abbrev
  - inverse-add-(global|mode)-abbrev == C-x a i (g|l)
  - M-x define-(global|mode)-abbrev
  - 前缀
    - 0 : region as expansion
    - C-u [N] : N words
- 删除
  - Arg: C-u -
  - 全部: M-x kill-all-abbrevs
- 扩展
  - abbrev-prefix-mark == M-'  (Ex. cnst -expands-into-> construction)
  - expand-abbrev == C-x a e 
  - M-x expand-region-abbrevs
  - M-x unexpand-abbrev
- 查看和编辑
  - M-x list-abbrevs (C-u [N] .. : local, N:次数)
  - M-x edit-abbrevs
- 保存
  - M-x write-abbrev-file <RET> file <RET>
  - M-x read-abbrev-file <RET> file <RET>
  - M-x define-abbrevs
  - M-x insert-abbrevs

** Register 寄存器
- 寄存器 : 存储 文本 矩形区块 位置 值 设置
- View
  - M-x view-register <RET>
- Jump
  - jump-to-register == C-x r j
- Position
  - Save: point-to-register == C-x r <SPC>
- Text|Rectangle
  - Save: copy-[rectangle]-to-register == C-x r (s|r)  (C-u .. : copy-to and del)
  - Insert: insert-register == C-x r i
- Text
  - Append: M-x append-to-register <RET>
    - increment-register == C-x r +
  - Prepend: M-x prepend-to-register <RET>
- Frame&Window Configuration
  - Save
    - window-configuration-to-register == C-x r w
    - frameset-to-register == C-x r f
  - Restore: C-x r j  (C-u .. : del frame invisible)
- Number
  - Save: number-to-register ==  C-u [N] C-x r n
  - Increment: C-u [N] C-x r +
  - Insert: insert-register == C-x r i
- Keyboard Macro
  - Save: kmacro-to-register ==  C-x C-k x
  - Exe: C-x r j
** Bookmark 书签
- 书签 : 保存缓冲区中位置
- 设置-光标位置
  - bookmark-set == C-x r m
  - bookmark-set-no-overwrite == C-x r M
- 移动到-指示的位置
  - bookmark-jump == C-x r b
- 显示-书签列表
  - list-bookmarks == C-x r l
- 删除
  - M-x bookmark-delete
- 重命名
  - M-x bookmark-rename
- 保存 加载
  - 到默认文件: bookmark-save
  - 新文件: bookmark-write
  - 加载: bookmark-load
- 插入
  - 文件内容: bookmark-insert
  - 文件名字: bookmark-insert-location
** Other
Highlight 高亮
- 光标所在行
  - hl-line-mode (当前缓冲)  [[Highlight Line][config]]

自动加载外部修改过的文件
- global-auto-revert-mode

Key bindings
- [[https://github.com/kai2nenobu/guide-key][guide-key]]

* Special Mode
** Dired
** Org
** Shell
** Git
- [[http://magit.github.io/][Magit]]

* Programming
** C
** Lisp
* hydra
聚合功能 更方便输入 并且 辅助记忆差 手速低 的我

** Window
#+BEGIN_SRC emacs-lisp
(global-set-key
 (kbd "<f2>")
 (defhydra f2-fun (:color pink :hint nil)
   "
Window
^ Resize ^         ^ Move ^       ^Split^      ^Delete
^^^^^^^^-----------------------------------------------------------------
_e_: enlarge         ^_i_^          _v_:|      _dw_:del-current
_s_: shrink       _j_     _l_       _x_:-      _da_:ace-del
_E_: enlarge-<>      ^_k_^          _|_:>move  _do_:del-other
_S_: shrink-<>     _ws_:swap      ___:Vmove ^ ^_db_:kill-buf
_bw_: balance      ^<Jump>^         ^^^^       _df_:del-frame 
^ ^                _a_:ace _f_:to-frame
"

   ("e" #'enlarge-window)
   ("s" #'shrink-window)
   ("E" #'enlarge-window-horizontally)
   ("S" #'shrink-window-horizontally)
   ("bw" #'balance-windows)
   ;; Move
   ("j" #'windmove-left)
   ("i" #'windmove-up)
   ("l" #'windmove-right)
   ("k" #'windmove-down)
   ("ws" ace-swap-window)
   ;; Jump
   ("a" ace-window :exit t)
   ("f" #'select-frame-by-name :exit t)
   ;; Spilt
   ("|" (lambda ()
          (interactive)
          (split-window-right)
          (windmove-right)))
   ("_" (lambda ()
          (interactive)
          (split-window-below)
          (windmove-down)))
   ("v" #'split-window-right)
   ("x" #'split-window-below)
   ;; Delete
   ("da" ace-delete-window)
   ("dw" delete-window)
   ("do" delete-other-windows :exit t)
   ("db" kill-this-buffer)
   ("df" delete-frame :exit t)
   ;; Misc
   ("t" transpose-frame "-<->|")
   ("nf" new-frame "New-frame" :exit t)
   ("z" #'text-scale-adjust "Zoom" :exit t)
   ;;
   ("q" nil "Quit" :color blue)))

#+END_SRC

** hydra mc
#+BEGIN_SRC emacs-lisp
(global-set-key
 (kbd "C-S-c")
 (defhydra hydra-mc  (:columns 5)
   "multiple-cursors"
   ("ll" mc/edit-lines "lines")
   ("le" mc/edit-ends-of-lines "end-lines")
   
   ("j" mc/mark-next-like-this "next")
   ("uj" mc/unmark-next-like-this "un-n")
   ("J" mc/skip-to-next-like-this "skip-n")
   ("s" #'mc/mark-next-like-this-symbol "symbols-n")

   ("k" mc/mark-previous-like-this "prev")
   ("uk" mc/unmark-previous-like-this "un-p")
   ("K" mc/skip-to-previous-like-this "skip-p")
   
   ("aa" mc/mark-all-like-this "all")
   ("A" mc/mark-all-dwim "dwim")
   ("aw" #'mc/mark-all-words-like-this "word")
   ("as" mc/mark-all-symbols-like-this-in-defun "symbols-in-def")
   
   ("r" #'mc/mark-all-in-region-regexp "region-regexp")
   ;; Quit
   ("q" nil "Quit" :color blue)))

;; ("i" mc/insert-numbers)
;; ( "h" mc-hide-unmatched-lines-mode)
;; ( "dr" mc/reverse-regions)
;; ( "ds" mc/sort-regions)

#+END_SRC

* Config

** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (ace-window-display-mode)
  :bind ("S-o" . ace-window))
#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  (("C-;" . 'avy-goto-char)
   ;; ("C-'" . 'avy-goto-char-2)
   ("M-g g" . 'avy-goto-line)
   ;; ("M-g e" . 'avy-goto-word-0)
   ("M-g w" . 'avy-goto-word-1)))
#+END_SRC
 
** Undo Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode))
#+END_SRC

** whole line or region
#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :diminish whole-line-or-region-mode
  :config
  (whole-line-or-region-mode t)
  (make-variable-buffer-local 'whole-line-or-region-mode))
#+END_SRC

** Mutiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :config
  (setq mc/always-run-for-all t))

(bind-key "M-<down-mouse-1>" 'mc/add-cursor-on-click)
(unbind-key "M-<down-mouse-1>" redshank-mode-map)
#+end_src

** Highlight Line

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC
