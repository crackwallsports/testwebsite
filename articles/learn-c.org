#+TITLE: 学习 C 语言 - 笔记整理 (草稿)
#+AUTHOR: Xt3
#+OPTIONS: html-postamble:nil html-style:nil tex:nil
#+HTML_DOCTYPE: html5
#+HTML_HEAD:<link href="/testwebsite/css/org.css" rel="stylesheet"></link>

#+version: 0.1


* COMMENT Generate
#+BEGIN_SRC lisp
(gen-with-frame "Learn C"
                #P"articles/learn-c.html")
#+END_SRC

* 开始前
** 我们要做什么?
- 将 脑子里想的东西 和 解决问题的方法 翻译成 程序 
- 程序 ~?:~ 计算机可以运行的 机器指令 (二进制代码 类似100000111100000100000001)
  - 我们直接写机器指令 ~?:~ bang... 脑袋炸了
  - 使用对应的 汇编指令 (addl $1, %ecx) ~?:~ 好一点 但还是不要
  - 自然语言 ~?:~ 喜欢 爱死了 ~!:~ 目前还不可能达到
  - 类似自然语言(高级语言) 限定的少量的词汇和语法 ~?:~ OK
- 三个问题
  - ? 用什么写程序
    - IDE (集成开发环境)
    - Editor (编辑器)
  - ? 怎么翻译 (高级语言 -> 机器指令)
    - 翻译(编译 或 解释) 
      - 编译器
      - 编译流程自动化
  - ? 如何运行
    - 运行
    - 输入 输出
- 脑子里的东西 和 解决问题的方法 怎么用 编程语言 写出来(表示) ?
  - 把 所想的东西 转换成 计算(算法, 步骤, 菜谱)
  - How?
- 计算机技术 基础知识 等等 (不在此笔记中啰嗦)
- 这里不关心 底层(计算机具体实现) 把它抽象掉(仅仅使用一些词语来代表)

** 准备
- 开发环境
  - 编辑器或IDE
  - 编译器 : gcc, clang
  - 编译流程自动化 : make, Makefile
- 流程示范: [OS:MacOS]
  - 打开 终端(Terminal)
  - 准备工作
    #+BEGIN_SRC shell :dir ~/
mkdir test # 建立 项目目录
cd test # 进入 项目目录
touch code.c # 新建 源文件
    #+END_SRC
  - 用编辑器 打开源文件 写代码
    #+BEGIN_SRC C
/* code.c */

#include <stdio.h>
int main(){
  printf("hello world");
}
    #+END_SRC
  - 编译 和 运行
    #+BEGIN_SRC shell :dir ~/test
cc code.c -o code
./code
    #+END_SRC
* 开始
- ? 我想让程序 输出 一些文字
  - 文字 怎么表达 ~?:~ 用 字符串
    #+BEGIN_SRC C
"字符串"
    #+END_SRC
  - 输出 ~?:~ 输出函数 这里使用puts函数
    #+BEGIN_SRC C
puts("字符串");
    #+END_SRC
    - ~!:~ puts不是我们定义的 需要导入头文件 (放在开头)
      #+BEGIN_SRC C
#include <stdio.h>
      #+END_SRC
  - 写在哪 ~?:~ main函数里 main()是程序执行的起点 这是约定
    #+BEGIN_SRC C
#include <stdio.h>

int main(){
  puts("字符串");
  
  return 0;
}    
    #+END_SRC

* 基础
** 类型
** 数
- 整数
  #+BEGIN_SRC C
123
-789

// 进制表示法
31 // 十进制
025 // 八进制 0开头
0x19 // 十六进制 0x开头
  #+END_SRC
- 浮点数(小数)
  #+BEGIN_SRC C
123.3
.3, 3. // 省略部分
1.2e2, 1.2e-2 // 科学计数法
  #+END_SRC
** 字符
- 字符
- 内部表示 : 整数
  - ASCII编码 ?
    - 编码 ?
- 特殊字符(转义)

** 数组
** 指针
** 字符串
- 字符串
- 如何表示 ~?:~ 字符数组 或 字符指针
  #+BEGIN_SRC C
char str[] = {'\a', '\b', '\c', '\0'};
char* str = "abc"; 
  #+END_SRC
** 函数
- 把 部分程序 封装起来 并 给一个名字 (这个也叫: 定义) 方便重复使用
- 定义
- 调用
- 返回值
** IO
*** 标准输入输出
*** 文件
** 控制流程
- 顺序 分支 循环(递归)
** 结构 共用 枚举
** 动态内存分配
** 概念
- 头文件
  - 导入
- 字面量
- 作用域 生命周期
- 变量


* COMMENT Test
Org
#+BEGIN_SRC lisp :results output html  :exports results
(format t "~a"
     (->html
      (u (:- '(small () "我们直接写机器指令 ?: bang... 脑袋炸了"))
         (:- '(small () "使用对应的 汇编指令 (addl $1, %ecx) ?: 有进步 但还是不要 "))
         (:- '(small () "自然语言 ?: 喜欢 爱死了 !: 目前还不可能达到"))
         (:- '(small () "类似自然语言(高级语言) 限定的少量的词汇和语法 ?: 我看行")))))
 #+END_SRC

use
#+BEGIN_SRC lisp
(format nil "~x" #o31)

#+END_SRC

#+RESULTS:
: 19
